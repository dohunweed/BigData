class Node:
    def __init__(self, data):
        self.data = data

def create_linked_list():
    head = Node(1)
    current = head
    while True:
        new_node = Node(2)
        current.next = new_node
        current = new_node

create_linked_list()
// 위의 예제 코드에서 create_linked_list 함수는 무한 루프 안에서 연결 리스트를 생성합니다.
// 각 노드는 Node 클래스의 인스턴스로 생성되고, data 속성에는 정수값이 저장됩니다. 또한, 각 노드는 다음 노드를 가리키는 next 속성을 가지고 있습니다.
// 이 예제에서는 current 변수가 현재 노드를 가리키고, 매 루프마다 새로운 노드를 생성하여 연결 리스트에 추가합니다.
// 그러나 current 변수는 이전에 생성된 노드를 계속해서 참조하고 있기 때문에, 가비지 컬렉션에 의해 이전 노드들이 해제되지 않습니다.이렇게 계속해서 노드가 생성되고 참조되면서 메모리가 누수되는 상황이 발생합니다.
// 이러한 상황에서는 메모리 누수를 방지하기 위해 필요한 조치를 취해야 합니다.예를 들어, 연결 리스트의 끝을 나타내는 노드에 대해 next 속성을 None으로 설정하여 연결을 끊을 수 있습니다.
// 또는 무한 루프를 제어하기 위해 조건문을 추가하여 특정 조건을 만족하면 루프를 종료시킬 수 있습니다.
// 메모리 누수는 실제로는 더 복잡한 상황에서 발생할 수 있으며, 코드의 구조와 로직에 따라 다를 수 있습니다.
// 따라서 메모리 누수를 방지하려면 코드를 신중하게 검토하고 메모리 사용을 주의해야 합니다. 불필요한 참조를 해제하고, 외부 자원을 관리하는 등의 조치를 취하여 가비지 컬렉션의 효율적인 동작과 메모리 사용을 최적화해야 합니다.
